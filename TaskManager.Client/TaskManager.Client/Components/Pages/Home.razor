@page "/"
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Domain.Models
@using Status = TaskManager.Domain.Models.TaskStatus
@rendermode InteractiveServer
@inject AppDbContext dbContext

<PageTitle>Task Manager</PageTitle>


@if (loadError != null)
{
    <p style="color:red">Ошибка загрузки: @loadError</p>
}

<h3>
    <button class="btn-add-task" @onclick="ToggleAddForm">Добавить задачу</button>

</h3>

<div class="task-columns">
    @RenderTaskColumn("Созданы", Status.Created)
    @RenderTaskColumn("В работе", Status.InProgress)
    @RenderTaskColumn("Выполнены", Status.Completed)
</div>



@if (showAddForm)
{
    <div class="modal-overlay" @onclick="ToggleAddForm">
        <div class="modal-window" @onclick:stopPropagation="true">
            <h3>Добавить задачу</h3>

            <input id="taskTitle" name="taskTitle" @bind="task.Title" placeholder="Название" />
            <input id="taskDescription" name="taskDescription" @bind="task.Description" placeholder="Описание" />

            @if (!string.IsNullOrEmpty(addTaskError))
            {
                <p style="color:red">@addTaskError</p>
            }

            <button @onclick="AddTask">Сохранить</button>
            <button @onclick="ToggleAddForm" style="margin-left: 10px;">Отмена</button>
        </div>
    </div>
}


@code {
    private bool showAddForm = false;
    private bool isLoading = true;

    private string dataSource = "";
    private string newCommentText = "";
    private string? message;
    private string? loadError;
    private string? addTaskError;
    private int? activeCommentTaskId = null;
    private string? commentError;

    private List<TaskItem> tasks = new();
    private List<Comment> comments = new();
    private TaskItem task = new();

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        addTaskError = "";
    }

    RenderFragment RenderTaskColumn(string title, Status status) => @<div class="task-column">

            <h3>@title</h3>
        

        @{
            var filteredTasks = tasks.Where(t => t.Status == status).ToList();
        }

        @if (!filteredTasks.Any())
        {
        switch (status)
        {
        case Status.Created:
            <p>У вас нет запланированных задач</p>
        ;
        break;
        case Status.InProgress:
            <p>У вас нет выполняемых задач</p>
        ;
        break;
        case Status.Completed:
            <p>У вас нет завершенных задач</p>
        ;
        break;
        }
        }
        else
        {
            @foreach (var t in filteredTasks)
        {
        <div class="task" >
            <p class="task-date">
                @t.User?.FirstName @t.User?.LastName,
                @t.CreatedAt.ToString("dd MMM", new System.Globalization.CultureInfo("ru-RU"))
            </p>
            <div class="task-header">

                
              
                <p class="task-title"> @t.Title</p>

                @if (status == Status.Created)
                {
                <button @onclick="() => ChangeStatus(t)" class="btn-start">Начать</button>
                }
                else if(status == Status.InProgress)
                {
                <button @onclick="() => ChangeStatus(t)" class="btn-complete">Завершить </button>
                }
                else{
                <button class="btn-completed" disabled>Завершено  </button>
                }
            </div>

            <p>Описание: @t.Description</p>
            

            @foreach (var comment in t.Comments)
        {
            <div class="comment">
                <p class="comment-author">@comment.User?.FirstName @comment.User?.LastName, 
                @comment.CreatedAt.ToString("dd MMM", new System.Globalization.CultureInfo("ru-RU"))</p>
                <p> @comment.Text</p>
            </div>
        }


            @if (activeCommentTaskId != t.TaskItemId)
        {
            <button class="btn-add-comment" @onclick="() => ShowCommentInput(t.TaskItemId)">Добавить комментарий</button>
        }


            @if (activeCommentTaskId == t.TaskItemId)
        {
            <div class="add-comment">
            
            <p>Что вы думаете об этой задаче?</p>
                <textarea @bind="newCommentText" placeholder="Добавьте комментарий..." class="comment-input"></textarea>
                <button @onclick="() => AddComment(t.TaskItemId)" class="save-message">Сохранить</button>

                @if (!string.IsNullOrEmpty(commentError))
            {
                <p style="color:red">@commentError</p>
            }
            </div>
        }
        </div>

        }

       
    }
    </div>
    ;

    protected override void OnInitialized()
    {
        dataSource = dbContext.Database.GetDbConnection().DataSource;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        tasks = await dbContext.Tasks
            .Include(t => t.User)
            .Include(t => t.Comments)
            .ThenInclude(c => c.User)
            .ToListAsync();
    }

    private async Task AddTask()
    {
        addTaskError = "";

        if (string.IsNullOrWhiteSpace(task.Title))
        {
            addTaskError = "Название обязательно для заполнения.";
            return;
        }
        if (string.IsNullOrWhiteSpace(task.Description))
        {
            addTaskError = "Описание обязательно для заполнения.";
            return;
        }

        try
        {
            dbContext.Tasks.Add(task);
            await dbContext.SaveChangesAsync();

            message = "Задача добавлена!";
            task = new TaskItem();

            await LoadTasks();
            showAddForm = false;
        }
        catch (Exception ex)
        {
            addTaskError = ex.Message;
        }
    }

    private async Task AddComment(int taskId)
    {
        commentError = null;

        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Комментарий не может быть пустым.";
            return;
        }

        try
        {
            var comment = new Comment
                {
                    Text = newCommentText,
                    TaskItemId = taskId,
                    CreatedAt = DateTime.Now,
                };

            dbContext.Comments.Add(comment);
            await dbContext.SaveChangesAsync();

            newCommentText = "";
            activeCommentTaskId = null;

            await LoadTasks(); 
        }
        catch (Exception ex)
        {
            commentError = ex.Message;
        }
    }

    private async Task ChangeStatus(TaskItem task)
    {
        task.Status = (Status)(((int)task.Status + 1) % 3);

        dbContext.Tasks.Update(task);
        await dbContext.SaveChangesAsync();

        await LoadTasks();
    }

    private void ShowCommentInput(int taskId)
    {
        activeCommentTaskId = taskId;
        newCommentText = "";
        commentError = null;
    }
}
