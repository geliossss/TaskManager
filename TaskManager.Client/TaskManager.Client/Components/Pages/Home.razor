@page "/"

@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Domain.Models
@using TaskManager.Client.Services

@using Status = TaskManager.Domain.Models.TaskStatus

@rendermode InteractiveServer

@inject AppDbContext dbContext
@inject AuthService Auth
@inject NavigationManager Nav
@inject TaskService TaskService

<h3>С возвращением, @Auth.UserName!</h3>



@if (loadError != null)
{
    <p style="color:red">@loadError</p>
}

<div class="task-columns">
    @RenderTaskColumn("Созданы", Status.Created)
    @RenderTaskColumn("В работе", Status.InProgress)
    @RenderTaskColumn("Выполнены", Status.Completed)
</div>

@if (showAddForm)
{
    <div class="modal-overlay" @onclick="ToggleAddForm">
        <div class="modal-window" @onclick:stopPropagation="true">
            <h3>Добавить задачу</h3>

            <input placeholder="Название" @bind="task.Title" />
            <input placeholder="Описание" @bind="task.Description" />

            @if (!string.IsNullOrEmpty(addTaskError))
            {
                <p style="color:red">@addTaskError</p>
            }

            <button @onclick="AddTask">Сохранить</button>
            <button @onclick="ToggleAddForm">Отмена</button>
        </div>
    </div>
}

@code {


    private TaskItem task = new();

    private bool showAddForm = false;

    private string? loadError;
    private string? addTaskError;

    private int? activeCommentTaskId = null;
    private string newCommentText = "";
    private string? commentError;
    private HashSet<int> expandedComments = new();

    private void ToggleComments(int taskId)
    {
        if (expandedComments.Contains(taskId))
            expandedComments.Remove(taskId);
        else
            expandedComments.Add(taskId);
    }
    private int draggedTaskId;


    private void OnDragStart(DragEventArgs e, int taskId)
    {
        draggedTaskId = taskId;
    }

    private async Task OnTaskDrop(DragEventArgs e, Status newStatus)
    {
        var task = tasks.FirstOrDefault(t => t.TaskItemId == draggedTaskId);
        if (task == null || task.Status == newStatus) return;

        task.Status = newStatus;

        try
        {
            await TaskService.UpdateTaskStatusAsync(task.TaskItemId, newStatus);
            await LoadTasks();
        }
        catch (Exception ex)
        {
            loadError = "Ошибка перемещения задачи: " + ex.Message;
        }
    }

    private List<TaskItem> tasks = new();
    

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        addTaskError = null;
    }

    private RenderFragment RenderTaskColumn(string title, Status status) => @<div class="task-column" ondragover="event.preventDefault()"
                                                                                      @ondrop="@((e) => OnTaskDrop(e, status))">

        <div class="task-header-row">
            <h3 class="task-column-title">@title</h3>
            @if(@title == "Созданы"){
            <button class="btn-add-task" @onclick="ToggleAddForm">  +  </button>
            }
        </div>                                                                         
        

        @{
        var filteredTasks = tasks.Where(t => t.Status == status).ToList();

        if (!filteredTasks.Any())
        {
                <p>Задач нет</p>
        ;
        }
        else
        {
                @foreach (var task in filteredTasks)
        {
        if (task.UserId == GetCurrentUserId())
        {
                <div class="task task-header-own" draggable="true"
                     @ondragstart="(e) => OnDragStart(e, task.TaskItemId)"  >
                    @RenderTaskContent(task, status)
                </div>
        }
        else
        {
                <div class="task">
                    @RenderTaskContent(task, status)
                </div>
        }
        }


              
        }
            }
    </div>;

        protected override async Task OnInitializedAsync()
        {
    if (!Auth.IsAuthenticated)
    {
        Nav.NavigateTo("/login");
        return;
    }

    await LoadTasks();
        }

        private async Task LoadTasks()
        {
            try
            {
                tasks = await TaskService.GetTasksAsync();
                loadError = null;
            }
            catch (Exception ex)
            {
                loadError = "Ошибка загрузки задач: " + ex.Message;
            }
                }

        private async Task AddTask()
                {
            addTaskError = null;
            var userId = GetCurrentUserId();

            if (userId == null)
            {
                addTaskError = "Пользователь не авторизован.";
                return;
            }

            if (string.IsNullOrWhiteSpace(task.Title) || string.IsNullOrWhiteSpace(task.Description))
            {
                addTaskError = "Название и описание обязательны.";
                return;
            }

            try
            {
                task.UserId = userId.Value;
                task.CreatedAt = DateTime.Now;
                task.Status = Status.Created;

                await TaskService.AddTaskAsync(task);
                task = new TaskItem();
                showAddForm = false;

                await LoadTasks();
            }
            catch (Exception ex)
            {
                addTaskError = "Ошибка добавления задачи: " + ex.Message;
    }
        }

        private async Task ChangeStatus(TaskItem task)
        {
    var userId = GetCurrentUserId();
    if (userId == null) return;

    try
    {
        await TaskService.ChangeStatusAsync(task, userId.Value);
        await LoadTasks();
    }
    catch (UnauthorizedAccessException ex)
    {
        loadError = ex.Message;
    }
    catch (Exception ex)
    {
        loadError = "Ошибка изменения статуса: " + ex.Message;
    }
        }

        private async Task DeleteTask(TaskItem task)
        {
    try
    {
        dbContext.Tasks.Remove(task);
        await dbContext.SaveChangesAsync();
        await LoadTasks();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Ошибка при удалении задачи: {ex.Message}");
    }
        }



        private async Task CompleteTask(TaskItem task)
        {
    var userId = GetCurrentUserId();
    if (userId == null) return;

    try
    {
        await TaskService.ChangeStatusAsync(task, userId.Value);
        await TaskService.SetCloseDateAsync(task, userId.Value);
        await LoadTasks();
    }
    catch (UnauthorizedAccessException ex)
    {
        loadError = ex.Message;
    }
    catch (Exception ex)
    {
        loadError = "Ошибка завершения задачи: " + ex.Message;
    }
        }

        private void ShowCommentInput(int taskId)
        {
    activeCommentTaskId = taskId;
    newCommentText = "";
    commentError = null;
        }

        private async Task AddComment(int taskId)
        {
    commentError = null;
    var userId = GetCurrentUserId();

    if (userId == null)
    {
        commentError = "Пользователь не авторизован.";
        return;
    }

    if (string.IsNullOrWhiteSpace(newCommentText))
    {
        commentError = "Комментарий не может быть пустым.";
        return;
    }

    try
    {
        var comment = new Comment
                {
                    Text = newCommentText,
                    TaskItemId = taskId,
                    UserId = userId.Value,
                    CreatedAt = DateTime.Now,
                };

        await TaskService.AddCommentAsync(comment);
        newCommentText = "";
        activeCommentTaskId = null;

        await LoadTasks();
    }
    catch (Exception ex)
    {
        commentError = "Ошибка добавления комментария: " + ex.Message;
    }
        }

        private int? GetCurrentUserId() => Auth.IsAuthenticated ? Auth.UserId : null;
        private RenderFragment RenderTaskContent(TaskItem task, Status status) => @<div>

        <div class="task-header ">
         
            <div class="task-info">
                <p class="task-date">
                    @task.User?.FirstName @task.User?.LastName<br />
                </p>
            </div>
            @if (task.UserId == GetCurrentUserId())
        {
            <button class="btn-delete" @onclick="() => DeleteTask(task)">Х</button>
        }
        </div>

        <div class="task-header">
            <p class="task-title">@task.Title</p>

            @if (task.UserId == GetCurrentUserId())
                {
                if (status == Status.Created)
                {
                    <button class="btn-start" @onclick="() => ChangeStatus(task)">Начать</button>
                }
                else if (status == Status.InProgress)
                {
                    <button class="btn-complete" @onclick="() => CompleteTask(task)">Завершить</button>
                }
                else
                {
                    <button class="btn-completed" disabled>Завершено</button>
                }
                }
        </div>

        <p class="description">Описание: @task.Description</p>
        <p class="task-date">Создано: @task.CreatedAt.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>

        @if (task.ClosedAt != null)
    {
        <p class="task-date">Завершено: @task.ClosedAt?.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>

    }

        @if (task.Comments?.Count > 0)
    {
        <button @onclick="() => ToggleComments(task.TaskItemId)" class="expand-comments-section">
            @(expandedComments.Contains(task.TaskItemId)
        ? $"Скрыть комментарии ({task.Comments.Count})"
        : $"Посмотреть комментарии ({task.Comments.Count})")
        </button>

        @if (expandedComments.Contains(task.TaskItemId))
    {
        <div class="comments">
            @foreach (var comment in task.Comments)
        {
            <div class="comment">
                <p><b>@comment.User?.FirstName @comment.User?.LastName</b>, @comment.CreatedAt.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>
                <p>@comment.Text</p>
            </div>
        }

            @if (activeCommentTaskId != task.TaskItemId)
        {
            <button class="btn-add-comment" @onclick="() => ShowCommentInput(task.TaskItemId)">Добавить комментарий</button>
        }

            @if (activeCommentTaskId == task.TaskItemId)
        {
            <div class="add-comment">
                <textarea @bind="newCommentText" placeholder="Добавьте комментарий..."></textarea>
                <button @onclick="() => AddComment(task.TaskItemId)" class="save-message">Сохранить</button>
                @if (!string.IsNullOrEmpty(commentError))
            {
                <p style="color:red">@commentError</p>
            }
            </div>
        }
        </div>
    }
    }
    else
    {
        @if (activeCommentTaskId != task.TaskItemId)
    {
        <button class="btn-add-comment" @onclick="() => ShowCommentInput(task.TaskItemId)">Добавить комментарий</button>
    }

        @if (activeCommentTaskId == task.TaskItemId)
    {
        <div class="add-comment">
            <textarea @bind="newCommentText" placeholder="Добавьте комментарий..."></textarea>
            <button @onclick="() => AddComment(task.TaskItemId)" class="save-message">Сохранить</button>
            @if (!string.IsNullOrEmpty(commentError))
        {
            <p style="color:red">@commentError</p>
        }
        </div>
    }
    }
    </div>;

} 