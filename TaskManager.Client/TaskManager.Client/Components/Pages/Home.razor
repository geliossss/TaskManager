@page "/"
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Domain.Models
@using Status = TaskManager.Domain.Models.TaskStatus
@inject AppDbContext dbContext

<PageTitle>Task Manager</PageTitle>

<h1>Задачи</h1>

@if (loadError != null)
{
    <p style="color:red">Ошибка загрузки: @loadError</p>
}

<div class="task-columns">
    @RenderTaskColumn("Созданы", Status.Created)
    @RenderTaskColumn("В работе", Status.InProgress)
    @RenderTaskColumn("Выполнены", Status.Completed)
</div>

<h3>
    <button @onclick="ToggleAddForm">Добавить задачу</button>
</h3>

@if (showAddForm)
{
    <div class="add-task-form">
        <input id="taskTitle" name="taskTitle" @bind="task.Title" placeholder="Название" />
        <input id="taskDescription" name="taskDescription" @bind="task.Description" placeholder="Описание" />
        <select id="taskStatus" name="taskStatus" @bind="task.Status">
            <option value="@Status.Created">Создана</option>
            <option value="@Status.InProgress">В работе</option>
            <option value="@Status.Completed">Завершена</option>
        </select>

        <button @onclick="AddTask">Сохранить</button>
    </div>
}

@code {
    private bool showAddForm = false;

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
    }

    RenderFragment RenderTaskColumn(string title, Status status) => __builder =>
    {
        <div class="task-column">
            <h3>@title</h3>
            @foreach (var t in tasks.Where(t => t.Status == status))
            {
                <div class="task">
                    <p>Название: @t.Title</p>
                    <p>Описание: @t.Description</p>
                    <p>Автор: @t.User?.FirstName @t.User?.LastName</p>
                </div>
            }
    </div>
;
    };

    private string dataSource = "";
    private List<TaskItem> tasks = new();
    private TaskItem task = new();
    private string? message;
    private string? loadError;
    private string? addTaskError;
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        dataSource = dbContext.Database.GetDbConnection().DataSource;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await dbContext.Tasks
                .Include(t => t.User)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private async Task AddTask()
    {
        try
        {
            dbContext.Tasks.Add(task);
            await dbContext.SaveChangesAsync();

            message = "Задача добавлена!";
            task = new TaskItem();

            await LoadTasks();
        }
        catch (Exception ex)
        {
            addTaskError = ex.Message;
        }
    }
}

<style>
    .task-columns {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    .task-column {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        background-color: #f9f9f9;
    }

    .task {
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background-color: #fff;
    }
</style>
