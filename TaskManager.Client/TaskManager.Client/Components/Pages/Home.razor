@page "/"
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Domain.Models
@using TaskManager.Client.Services
@using Status = TaskManager.Domain.Models.TaskStatus
@rendermode InteractiveServer
@inject CommentService CommentService
@inject AppDbContext dbContext
@inject AuthService Auth
@inject NavigationManager Nav
@inject TaskService TaskService

<link rel="stylesheet" href="Home.css" />

<div class="controls-container">
    <!-- Кнопка для открытия модального окна фильтров -->
    <button class="btn-add-task" @onclick="ToggleFilterModal">Фильтры</button>

    <!-- Блок сортировки -->
    <div class="sort-controls">
        <label for="sort-select">Сортировка:</label>
        <select id="sort-select" @bind="currentSortOption">
            <option value="default">По умолчанию</option>
            <option value="creation_desc">Сначала новые</option>
            <option value="creation_asc">Сначала старые</option>
            <option value="author_asc">Авторы (А-Я)</option>
            <option value="author_desc">Авторы (Я-А)</option>
        </select>
    </div>

    <!-- Кнопка включения/выключения перетаскивания -->
    <button @onclick="ToggleDrag" class="btn-add-task">@((dragEnabled) ? "Отключить перетаскивание" : "Включить перетаскивание")</button>
</div>

@if (loadError != null)
{
        <p style="color:red">@loadError</p>
}

<div class="task-columns">
    @RenderTaskColumn("Созданы", Status.Created)
    @RenderTaskColumn("В работе", Status.InProgress)
    @RenderTaskColumn("Выполнены", Status.Completed)
</div>

<!-- Модальное окно для фильтров -->
@if (showFilterModal)
{
        <div class="modal-overlay" @onclick="ToggleFilterModal">
            <div class="modal-window" @onclick:stopPropagation="true">
                <h3>Настройки фильтров</h3>

                <div class="filter-controls">
                    <label for="status-filter">Статус:</label>
                    <select id="status-filter" @bind="currentStatusFilter">
                        <option value="all">Все</option>
                        <option value="Created">Созданы</option>
                        <option value="InProgress">В работе</option>
                        <option value="Completed">Выполнены</option>
                    </select>
                </div>

                <div class="filter-controls">
                    <label for="start-date">Дата начала:</label>
                    <input type="date" id="start-date" @bind="currentStartDate" />
                </div>

                <div class="filter-controls">
                    <label for="end-date">Дата окончания:</label>
                    <input type="date" id="end-date" @bind="currentEndDate" />
                </div>

                <div class="filter-controls">
                    <label for="author-filter">Автор:</label>
                    <input type="text" id="author-filter" @bind="currentAuthorFilter" placeholder="Фильтровать по автору"/>
                </div>

                <div class="modal-footer">
                    <button @onclick="ApplyFilters" class="save-message">Применить фильтры</button>
                    <button @onclick="ToggleFilterModal" class="cancel-button">Отмена</button>
                </div>
            </div>
        </div>
}

@if (showAddForm)
{
        <div class="modal-overlay" @onclick="ToggleAddForm">
            <div class="modal-window" @onclick:stopPropagation="true">
                <h3>Добавить задачу</h3>
                <input placeholder="Название" @bind="task.Title" />
                <input placeholder="Описание" @bind="task.Description" />

            @if (!string.IsNullOrEmpty(addTaskError))
            {
                        <p style="color:red">@addTaskError</p>
            }

                <button @onclick="AddTask" class="save-message">Сохранить</button>
                <button @onclick="ToggleAddForm">Отмена</button>
            </div>
        </div>
}

@code {
    private TaskItem task = new();
    private bool showAddForm = false;
    private bool showFilterModal = false; // Модальное окно для фильтров
    private string? loadError;
    private string? addTaskError;
    private int? activeCommentTaskId = null;
    private string newCommentText = "";
    private string? commentError;
    private HashSet<int> expandedComments = new();
    private int draggedTaskId;
    private List<TaskItem> tasks = new();

    private bool dragEnabled = true;

    private string currentSortOption = "default";
    private string currentStatusFilter = "all";
    private string currentAuthorFilter = "";
    private DateTime? currentStartDate = null;
    private DateTime? currentEndDate = null;

    private void ToggleDrag()
    {
        dragEnabled = !dragEnabled;
    }

    private void ToggleComments(int taskId)
    {
        if (expandedComments.Contains(taskId))
            expandedComments.Remove(taskId);
        else
            expandedComments.Add(taskId);
    }

    private void OnDragStart(DragEventArgs e, int taskId)
    {
        draggedTaskId = taskId;
    }

    private async Task OnTaskDrop(DragEventArgs e, Status newStatus)
    {
        var task = tasks.FirstOrDefault(t => t.TaskItemId == draggedTaskId);
        if (task == null || task.Status == newStatus) return;

        try
        {
            await TaskService.UpdateTaskStatusAsync(task.TaskItemId, newStatus);
            await LoadTasks();
        }
        catch (Exception ex)
        {
            loadError = "Ошибка перемещения задачи: " + ex.Message;
        }
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        addTaskError = null;
    }

    private void ToggleFilterModal()
    {
        showFilterModal = !showFilterModal;
    }

    private async Task ApplyFilters()
    {
        await LoadFilteredTasks();
        ToggleFilterModal(); // Закрыть модальное окно после применения фильтров
    }

    private async Task LoadFilteredTasks()
    {
        tasks = await TaskService.GetFilteredTasksAsync(currentStatusFilter, currentAuthorFilter, currentStartDate, currentEndDate);
        loadError = null;
    }

    private RenderFragment RenderTaskColumn(string title, Status status) => @<div class="task-column" ondragover="event.preventDefault()"
                                                                                              @ondrop="@((e) => OnTaskDrop(e, status))">
                <div class="task-header-row">
                    <h3 class="task-column-title">@title</h3>
                    @if (@title == "Созданы")
        {
                    <button class="btn-add-task" @onclick="ToggleAddForm">+</button>
        }
                </div>

                @{
            var currentUserId = GetCurrentUserId();
            var filteredTasks = tasks.Where(t => t.Status == status).ToList();

            switch (currentSortOption)
            {
                case "creation_desc":
                    filteredTasks = filteredTasks.OrderByDescending(t => t.CreatedAt).ToList();
                    break;

                case "creation_asc":
                    filteredTasks = filteredTasks.OrderBy(t => t.CreatedAt).ToList();
                    break;

                case "author_asc":
                    filteredTasks = filteredTasks.OrderBy(item => item.User?.LastName ?? string.Empty)
                                                 .ThenBy(item => item.User?.FirstName ?? string.Empty)
                                                 .ToList();
                    break;

                case "author_desc":
                    filteredTasks = filteredTasks.OrderByDescending(item => item.User?.LastName ?? string.Empty)
                                                 .ThenByDescending(item => item.User?.FirstName ?? string.Empty)
                                                 .ToList();
                    break;

                default:
                    filteredTasks = filteredTasks.OrderByDescending(t => t.UserId == currentUserId)
                                                 .ThenByDescending(t => t.CreatedAt)
                                                 .ThenBy(t => t.UserId)
                                                 .ToList();
                    break;
            }

            if (!filteredTasks.Any())
            {
                                <p>Задач нет</p>
            }
            else
            {
                foreach (var task in filteredTasks)
                {
                                    <div class="@(task.UserId == currentUserId ? "task task-header-own" : "task")"
                                         draggable="@((task.UserId == currentUserId && dragEnabled) ? "true" : "false")"
                                         @ondragstart="@(e => OnDragStart(e, task.TaskItemId))">
                                        @RenderTaskContent(task, status)
                                    </div>
                }
            }
                }
            </div>;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }
        await LoadFilteredTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
            loadError = null;
        }
        catch (Exception ex)
        {
            loadError = "Ошибка загрузки задач: " + ex.Message;
        }
    }

    private async Task AddTask()
    {
        addTaskError = null;
        var userId = GetCurrentUserId();

        if (userId == null)
        {
            addTaskError = "Пользователь не авторизован.";
            return;
        }

        if (string.IsNullOrWhiteSpace(task.Title) || string.IsNullOrWhiteSpace(task.Description))
        {
            addTaskError = "Название и описание обязательны.";
            return;
        }

        try
        {
            task.UserId = userId.Value;
            task.CreatedAt = DateTime.Now;
            task.Status = Status.Created;

            await TaskService.AddTaskAsync(task);
            task = new TaskItem();
            showAddForm = false;
            await LoadTasks();
        }
        catch (Exception ex)
        {
            addTaskError = "Ошибка добавления задачи: " + ex.Message;
        }
    }

    private async Task ChangeStatus(TaskItem task)
    {
        var userId = GetCurrentUserId();
        if (userId == null) return;

        try
        {
            await TaskService.ChangeStatusAsync(task, userId.Value);
            await LoadTasks();
        }
        catch (UnauthorizedAccessException ex)
        {
            loadError = ex.Message;
        }
        catch (Exception ex)
        {
            loadError = "Ошибка изменения статуса: " + ex.Message;
        }
    }

    private async Task DeleteTask(TaskItem task)
    {
        try
        {
            await TaskService.DeleteTaskAsync(task);
            await LoadTasks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении задачи: {ex.Message}");
        }
    }

    private void ShowCommentInput(int taskId)
    {
        activeCommentTaskId = taskId;
        newCommentText = "";
        commentError = null;
    }

    private async Task AddComment(int taskId)
    {
        commentError = null;
        var userId = GetCurrentUserId();

        if (userId == null)
        {
            commentError = "Пользователь не авторизован.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            commentError = "Комментарий не может быть пустым.";
            return;
        }

        try
        {
            var comment = new Comment
                    {
                        Text = newCommentText,
                        TaskItemId = taskId,
                        UserId = userId.Value,
                        CreatedAt = DateTime.Now,
                    };

            await CommentService.AddCommentAsync(comment);
            newCommentText = "";
            activeCommentTaskId = null;
            await LoadTasks();
        }
        catch (Exception ex)
        {
            commentError = "Ошибка добавления комментария: " + ex.Message;
        }
    }

    private int? GetCurrentUserId() => Auth.IsAuthenticated ? Auth.UserId : null;

    private async Task ConfirmDelete(TaskItem task)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Удалить задачу '{task.Title}'?"))
        {
            await DeleteTask(task);
        }
    }

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    private RenderFragment RenderTaskContent(TaskItem task, Status status) => @<div>
                <div class="task-header">
                    <div class="task-info">
                        <p class="task-date">
                            @task.User?.LastName @task.User?.FirstName<br />
                        </p>
                    </div>
                    @if (task.UserId == GetCurrentUserId())
        {
                    <button class="btn-delete" @onclick="() => ConfirmDelete(task)">Х</button>
        }
                </div>

                <div class="task-header">
                    <p class="task-title">@task.Title</p>
                    @if (task.UserId == GetCurrentUserId())
        {
        if (status == Status.Created)
        {
                    <button class="btn-start" @onclick="() => ChangeStatus(task)">Начать</button>
        }
        else if (status == Status.InProgress)
        {
                    <button class="btn-complete" @onclick="() => ChangeStatus(task)">Завершить</button>
        }
        else
        {
                    <button class="btn-completed" disabled>Завершено</button>
        }
        }
                </div>

                <p class="description">Описание: @task.Description</p>
                <p class="task-date">Создано: @task.CreatedAt.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>

                @if (task.ClosedAt != null)
    {
                <p class="task-date">Завершено: @task.ClosedAt?.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>
    }

                @if (task.Comments?.Count > 0)
    {
                <button @onclick="() => ToggleComments(task.TaskItemId)" class="expand-comments-section">
                    @(expandedComments.Contains(task.TaskItemId)
        ? $"Скрыть комментарии"
        : $"Посмотреть комментарии ({task.Comments.Count})")
                </button>

                @if (expandedComments.Contains(task.TaskItemId))
    {
                <div class="comments">
                    @foreach (var comment in task.Comments)
        {
                    <div class="comment">
                        <p><b>@comment.User?.LastName @comment.User?.FirstName</b>, @comment.CreatedAt.ToString("dd MMM HH:mm", new System.Globalization.CultureInfo("ru-RU"))</p>
                        <p>@comment.Text</p>
                    </div>
        }

                    @if (activeCommentTaskId != task.TaskItemId)
        {
                    <button class="btn-add-comment" @onclick="() => ShowCommentInput(task.TaskItemId)">Добавить комментарий</button>
        }

                    @if (activeCommentTaskId == task.TaskItemId)
        {
                    <div class="add-comment">
                        <textarea @bind="newCommentText" placeholder="Добавьте комментарий..."></textarea>
                        <button @onclick="() => AddComment(task.TaskItemId)" class="save-message">Сохранить</button>
                        @if (!string.IsNullOrEmpty(commentError))
            {
                        <p style="color:red">@commentError</p>
            }
                    </div>
        }
                </div>
    }
    }
    else
    {
                @if (activeCommentTaskId != task.TaskItemId)
    {
                <button class="btn-add-comment" @onclick="() => ShowCommentInput(task.TaskItemId)">
                    Добавить комментарий
                </button>
    }
    else
    {
                <button class="btn-add-comment" @onclick="HideCommentInput">
                    Закрыть
                </button>
    }


                @if (activeCommentTaskId == task.TaskItemId)
    {
                <div class="add-comment">
                    <textarea @bind="newCommentText" placeholder="Добавьте комментарий..."></textarea>
                    <button @onclick="() => AddComment(task.TaskItemId)" class="save-message">Сохранить</button>
                    @if (!string.IsNullOrEmpty(commentError))
        {
                    <p style="color:red">@commentError</p>
        }
                </div>
    }
    }
            </div>;

    private void HideCommentInput()
    {
        activeCommentTaskId = null;
    }
}
