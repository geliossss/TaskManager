@page "/register"
@using TaskManager.Domain.DTO
@using TaskManager.Client.Services
@inject UserService UserService
@inject NavigationManager Nav
@rendermode InteractiveServer
<h3>Регистрация</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <p style="color: red">@Message</p>
}

<div>
    <label>Фамилия:</label>
    <input @bind="Model.LastName" />
</div>
<div>
    <label>Имя:</label>
    <input @bind="Model.FirstName" />
</div>
<div>
    <label>Отчество:</label>
    <input @bind="Model.SurName" />
</div>
<div>
    <label>Логин:</label>
    <input @bind="Model.Login" />
</div>
<div>
    <label>Пароль:</label>
    <input type="password" @bind="Model.Password" />
</div>

<button @onclick="RegisterUser">Зарегистрироваться</button>

@code {
    private RegisterRequest Model = new();
    private string? Message;

    private async Task RegisterUser()
    {
        Console.WriteLine($"[RegisterUser] Начало регистрации. Логин: '{Model.Login}', Длина пароля: {Model.Password?.Length ?? 0}");
        try
        {
            var result = await UserService.RegisterAsync(Model);
            if (result == null)
            {
                Console.WriteLine("[RegisterUser] Регистрация успешна.");
                Nav.NavigateTo("/login");
            }
            else
            {
                Console.WriteLine($"[RegisterUser] Регистрация не удалась. Сообщение: {result}");
                Message = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[RegisterUser] Ошибка при регистрации: {ex.Message}");
            Message = "Произошла ошибка при регистрации.";
        }
    }
}
